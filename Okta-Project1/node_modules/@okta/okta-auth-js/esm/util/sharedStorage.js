import { isTransactionMeta } from '../types';
var MAX_ENTRY_LIFETIME = 30 * 60 * 1000; // 30 minutes

export function pruneSharedStorage(storageManager) {
  var sharedStorage = storageManager.getSharedTansactionStorage();
  var entries = sharedStorage.getStorage();
  Object.keys(entries).forEach(state => {
    var entry = entries[state];
    var age = Date.now() - entry.dateCreated;

    if (age > MAX_ENTRY_LIFETIME) {
      delete entries[state];
    }
  });
  sharedStorage.setStorage(entries);
}
export function saveTransactionToSharedStorage(storageManager, state, meta) {
  var sharedStorage = storageManager.getSharedTansactionStorage();
  var entries = sharedStorage.getStorage();
  entries[state] = {
    dateCreated: Date.now(),
    transaction: meta
  };
  sharedStorage.setStorage(entries);
}
export function loadTransactionFromSharedStorage(storageManager, state) {
  var sharedStorage = storageManager.getSharedTansactionStorage();
  var entries = sharedStorage.getStorage();
  var entry = entries[state];

  if (entry && entry.transaction && isTransactionMeta(entry.transaction)) {
    return entry.transaction;
  }

  return null;
}
export function clearTransactionFromSharedStorage(storageManager, state) {
  var sharedStorage = storageManager.getSharedTansactionStorage();
  var entries = sharedStorage.getStorage();
  delete entries[state];
  sharedStorage.setStorage(entries);
}
//# sourceMappingURL=sharedStorage.js.map