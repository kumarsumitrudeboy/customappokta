{"version":3,"sources":["../../../../../lib/idx/remediators/Base/AuthenticatorData.ts"],"names":["Remediator","AuthenticatorData","constructor","remediation","values","authenticators","authenticatorKey","getAuthenticator","key","authenticator","find","map","type","mapAuthenticatorFromValues","getNextStep","common","options","getMethodTypes","getAuthenticatorFromValues","methodType","getAuthenticatorFromRemediation","value","name","form"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,UAAT,QAA8C,cAA9C;AAQA;AACA,OAAO,MAAMC,iBAAN,SAAgCD,UAAhC,CAA2C;AAQhDE,EAAAA,WAAW,CAACC,WAAD,EAAoE;AAAA,QAAtCC,MAAsC,uEAAJ,EAAI;AAC7E,UAAMD,WAAN,EAAmBC,MAAnB,EAD6E,CAG7E;;AAH6E,iCANzE;AACJ,uBAAiB;AADb,KAMyE;;AAI7E,QAAM;AAAEC,MAAAA;AAAF,QAAqB,KAAKD,MAAhC;AACA,QAAME,gBAAgB,GAAG,KAAKC,gBAAL,GAAwBC,GAAjD;AACA,QAAMC,aAAa,GAAIJ,cAAJ,aAAIA,cAAJ,uBAAIA,cAAD,CAChBK,IADgB,CACXD,aAAa,IAAIA,aAAa,CAACD,GAAd,KAAsBF,gBAD5B,CAAtB;;AAEA,QAAIG,aAAJ,EAAmB;AACjB;AACA,WAAKL,MAAL,CAAYC,cAAZ,GAA6BA,cAAc,CAACM,GAAf,CAAmBF,aAAa,IAAI;AAC/D,YAAIH,gBAAgB,KAAKG,aAAa,CAACG,IAAvC,EAA6C;AAC3C,iBAAO,KAAKC,0BAAL,CAAgCJ,aAAhC,CAAP;AACD;;AACD,eAAOA,aAAP;AACD,OAL4B,CAA7B;AAMD,KARD,MAQO;AACL;AACA,WAAKL,MAAL,CAAYC,cAAZ,GAA6B,CAC3B,GAAGA,cADwB,EAE3B,KAAKQ,0BAAL,EAF2B,CAA7B;AAID;AACF;;AAEDC,EAAAA,WAAW,GAAG;AACZ,QAAMC,MAAM,GAAG,MAAMD,WAAN,EAAf;AACA,QAAME,OAAO,GAAG,KAAKC,cAAL,EAAhB;AACA,2CACKF,MADL,GAEMC,OAAO,IAAI;AAAEA,MAAAA;AAAF,KAFjB;AAID,GAxC+C,CA0ChD;;;AACUE,EAAAA,0BAA0B,GAAkB;AACpD,QAAI,CAAC,KAAKd,MAAL,CAAYC,cAAjB,EAAiC;AAC/B,aAAO,IAAP;AACD;;AAED,QAAMC,gBAAgB,GAAG,KAAKC,gBAAL,GAAwBC,GAAjD;AACA,QAAMC,aAAa,GAAI,KAAKL,MAAL,CAAYC,cAAb,CACnBK,IADmB,CACdD,aAAa,IAAIA,aAAa,CAACD,GAAd,KAAsBF,gBADzB,CAAtB;AAEA,WAAOG,aAAP;AACD;;AAESI,EAAAA,0BAA0B,CAACJ,aAAD,EAA+C;AACjF;AACA,QAAMD,GAAG,GAAG,KAAKD,gBAAL,GAAwBC,GAApC;AACA,QAAM;AAAEW,MAAAA;AAAF,QAAiB,KAAKf,MAA5B;AACA;AACEI,MAAAA;AADF,OAEMC,aAAa,IAAIA,aAFvB,GAGMU,UAAU,IAAI;AAAEA,MAAAA;AAAF,KAHpB;AAKD;;AAESC,EAAAA,+BAA+B,GAAwB;AAC/D,QAAMX,aAAa,GAAG,KAAKN,WAAL,CAAiBkB,KAAjB,CACnBX,IADmB,CACd;AAAA,UAAC;AAAEY,QAAAA;AAAF,OAAD;AAAA,aAAcA,IAAI,KAAK,eAAvB;AAAA,KADc,CAAtB;AAEA,WAAOb,aAAP;AACD;;AAEOQ,EAAAA,cAAc,GAAgB;AAAA;;AACpC,QAAMR,aAAkC,GAAG,KAAKW,+BAAL,EAA3C;AACA,oCAAOX,aAAa,CAACc,IAAd,CAAmBF,KAAnB,CAAyBX,IAAzB,CAA8B;AAAA,UAAC;AAAEY,QAAAA;AAAF,OAAD;AAAA,aAAcA,IAAI,KAAK,YAAvB;AAAA,KAA9B,CAAP,0DAAO,sBAAoEN,OAA3E;AACD;;AA1E+C","sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { Remediator, RemediationValues } from './Remediator';\nimport { Authenticator } from '../../types';\nimport { IdxRemediationValue, IdxOption, IdxRemediation } from '../../types/idx-js';\n\nexport type AuthenticatorDataValues = RemediationValues & {\n  methodType?: string;\n};\n\n// Base class - DO NOT expose static remediationName\nexport class AuthenticatorData extends Remediator {\n\n  map = {\n    'authenticator': []\n  };\n\n  values: AuthenticatorDataValues;\n\n  constructor(remediation: IdxRemediation, values: AuthenticatorDataValues = {}) {\n    super(remediation, values);\n\n    // Unify authenticator input type\n    const { authenticators } = this.values;\n    const authenticatorKey = this.getAuthenticator().key;\n    const authenticator = (authenticators as Authenticator[])\n        ?.find(authenticator => authenticator.key === authenticatorKey);\n    if (authenticator) {\n      // map\n      this.values.authenticators = authenticators.map(authenticator => {\n        if (authenticatorKey === authenticator.type) {\n          return this.mapAuthenticatorFromValues(authenticator);\n        }\n        return authenticator;\n      });\n    } else {\n      // add\n      this.values.authenticators = [\n        ...authenticators, \n        this.mapAuthenticatorFromValues()\n      ] as Authenticator[];\n    }\n  }\n\n  getNextStep() {\n    const common = super.getNextStep();\n    const options = this.getMethodTypes();\n    return { \n      ...common, \n      ...(options && { options }) \n    };\n  }\n\n  // Grab authenticator from authenticators list\n  protected getAuthenticatorFromValues(): Authenticator {\n    if (!this.values.authenticators) {\n      return null;\n    }\n\n    const authenticatorKey = this.getAuthenticator().key;\n    const authenticator = (this.values.authenticators as Authenticator[])\n      .find(authenticator => authenticator.key === authenticatorKey);\n    return authenticator;\n  }\n\n  protected mapAuthenticatorFromValues(authenticator?: Authenticator): Authenticator {\n    // add methodType to authenticator if it exists in values\n    const key = this.getAuthenticator().key;\n    const { methodType } = this.values;\n    return { \n      key, \n      ...(authenticator && authenticator),\n      ...(methodType && { methodType }) \n    };\n  }\n\n  protected getAuthenticatorFromRemediation(): IdxRemediationValue {\n    const authenticator = this.remediation.value\n      .find(({ name }) => name === 'authenticator');\n    return authenticator;\n  }\n\n  private getMethodTypes(): IdxOption[] {\n    const authenticator: IdxRemediationValue = this.getAuthenticatorFromRemediation();\n    return authenticator.form.value.find(({ name }) => name === 'methodType')?.options;\n  }\n}\n"],"file":"AuthenticatorData.js"}